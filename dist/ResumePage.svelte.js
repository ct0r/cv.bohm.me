/* src/ResumePage.svelte generated by Svelte v3.32.1 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	get_spread_object,
	get_spread_update,
	group_outros,
	handle_promise,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import "../index.css.proxy.js";
import ContentItem from "./ContentItem.svelte.js";
import ContentSection from "./ContentSection.svelte.js";
import SidebarSection from "./SidebarSection.svelte.js";
import { decryptBytes } from "./crypto.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[11] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	return child_ctx;
}

// (153:0) {:catch error}
function create_catch_block(ctx) {
	let t0_value = console.log(/*error*/ ctx[17]) + "";
	let t0;
	let t1;
	let div2;

	return {
		c() {
			t0 = text(t0_value);
			t1 = space();
			div2 = element("div");

			div2.innerHTML = `<div class="flex flex-col items-start space-y-3 sm:flex-row sm:space-y-0 sm:items-center sm:space-x-3"><p class="font-semibold text-red-500 text-9xl">500</p> 
            <div class="space-y-2"><h1 class="flex items-center space-x-2"><span class="text-xl font-medium text-gray-600 sm:text-2xl">Error.</span></h1> 
                <p class="text-base font-normal text-gray-600">To je teda trapas...</p></div></div>`;

			attr(div2, "class", "flex items-center justify-center h-screen bg-gray-100");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
			insert(target, div2, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*promise*/ 1 && t0_value !== (t0_value = console.log(/*error*/ ctx[17]) + "")) set_data(t0, t0_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
			if (detaching) detach(div2);
		}
	};
}

// (82:0) {:then data}
function create_then_block(ctx) {
	let div6;
	let div5;
	let div4;
	let div0;
	let t0;
	let div1;
	let h1;
	let t1_value = /*data*/ ctx[7].name + "";
	let t1;
	let t2;
	let h2;
	let t3_value = /*data*/ ctx[7].occupation + "";
	let t3;
	let t4;
	let div2;
	let sidebarsection0;
	let t5;
	let sidebarsection1;
	let t6;
	let sidebarsection2;
	let t7;
	let sidebarsection3;
	let t8;
	let div3;
	let contentsection0;
	let t9;
	let contentsection1;
	let current;

	sidebarsection0 = new SidebarSection({
			props: {
				title: "Contact",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	sidebarsection1 = new SidebarSection({
			props: {
				title: "Skills",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	sidebarsection2 = new SidebarSection({
			props: {
				title: "Languages",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	sidebarsection3 = new SidebarSection({
			props: {
				title: "Interests",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	contentsection0 = new ContentSection({
			props: {
				title: "Experience",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	contentsection1 = new ContentSection({
			props: {
				title: "Education",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div6 = element("div");
			div5 = element("div");
			div4 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			h1 = element("h1");
			t1 = text(t1_value);
			t2 = space();
			h2 = element("h2");
			t3 = text(t3_value);
			t4 = space();
			div2 = element("div");
			create_component(sidebarsection0.$$.fragment);
			t5 = space();
			create_component(sidebarsection1.$$.fragment);
			t6 = space();
			create_component(sidebarsection2.$$.fragment);
			t7 = space();
			create_component(sidebarsection3.$$.fragment);
			t8 = space();
			div3 = element("div");
			create_component(contentsection0.$$.fragment);
			t9 = space();
			create_component(contentsection1.$$.fragment);
			attr(div0, "class", "w-full md:w-1/3 bg-gray-800");
			attr(h1, "class", "text-4xl font-bold tracking-widest uppercase");
			attr(h2, "class", "text-lg uppercase tracking-wider");
			attr(div1, "class", "w-full md:w-2/3 p-8 text-gray-800");
			attr(div2, "class", "w-full md:w-1/3 p-8 text-gray-300 bg-gray-800");
			attr(div3, "class", "w-full md:w-2/3 p-8");
			attr(div4, "class", "flex flex-wrap");
			attr(div5, "class", "md:my-12");
			attr(div6, "class", "max-w-3xl mx-auto text-gray-800 bg-white shadow-lg");
		},
		m(target, anchor) {
			insert(target, div6, anchor);
			append(div6, div5);
			append(div5, div4);
			append(div4, div0);
			append(div4, t0);
			append(div4, div1);
			append(div1, h1);
			append(h1, t1);
			append(div1, t2);
			append(div1, h2);
			append(h2, t3);
			append(div4, t4);
			append(div4, div2);
			mount_component(sidebarsection0, div2, null);
			append(div2, t5);
			mount_component(sidebarsection1, div2, null);
			append(div2, t6);
			mount_component(sidebarsection2, div2, null);
			append(div2, t7);
			mount_component(sidebarsection3, div2, null);
			append(div4, t8);
			append(div4, div3);
			mount_component(contentsection0, div3, null);
			append(div3, t9);
			mount_component(contentsection1, div3, null);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*promise*/ 1) && t1_value !== (t1_value = /*data*/ ctx[7].name + "")) set_data(t1, t1_value);
			if ((!current || dirty & /*promise*/ 1) && t3_value !== (t3_value = /*data*/ ctx[7].occupation + "")) set_data(t3, t3_value);
			const sidebarsection0_changes = {};

			if (dirty & /*$$scope, promise*/ 262145) {
				sidebarsection0_changes.$$scope = { dirty, ctx };
			}

			sidebarsection0.$set(sidebarsection0_changes);
			const sidebarsection1_changes = {};

			if (dirty & /*$$scope, promise*/ 262145) {
				sidebarsection1_changes.$$scope = { dirty, ctx };
			}

			sidebarsection1.$set(sidebarsection1_changes);
			const sidebarsection2_changes = {};

			if (dirty & /*$$scope, promise*/ 262145) {
				sidebarsection2_changes.$$scope = { dirty, ctx };
			}

			sidebarsection2.$set(sidebarsection2_changes);
			const sidebarsection3_changes = {};

			if (dirty & /*$$scope, promise*/ 262145) {
				sidebarsection3_changes.$$scope = { dirty, ctx };
			}

			sidebarsection3.$set(sidebarsection3_changes);
			const contentsection0_changes = {};

			if (dirty & /*$$scope, promise*/ 262145) {
				contentsection0_changes.$$scope = { dirty, ctx };
			}

			contentsection0.$set(contentsection0_changes);
			const contentsection1_changes = {};

			if (dirty & /*$$scope, promise*/ 262145) {
				contentsection1_changes.$$scope = { dirty, ctx };
			}

			contentsection1.$set(contentsection1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(sidebarsection0.$$.fragment, local);
			transition_in(sidebarsection1.$$.fragment, local);
			transition_in(sidebarsection2.$$.fragment, local);
			transition_in(sidebarsection3.$$.fragment, local);
			transition_in(contentsection0.$$.fragment, local);
			transition_in(contentsection1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(sidebarsection0.$$.fragment, local);
			transition_out(sidebarsection1.$$.fragment, local);
			transition_out(sidebarsection2.$$.fragment, local);
			transition_out(sidebarsection3.$$.fragment, local);
			transition_out(contentsection0.$$.fragment, local);
			transition_out(contentsection1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div6);
			destroy_component(sidebarsection0);
			destroy_component(sidebarsection1);
			destroy_component(sidebarsection2);
			destroy_component(sidebarsection3);
			destroy_component(contentsection0);
			destroy_component(contentsection1);
		}
	};
}

// (96:20) <SidebarSection title="Contact">
function create_default_slot_5(ctx) {
	let h40;
	let t1;
	let div0;
	let a0;
	let t2_value = /*data*/ ctx[7].phone + "";
	let t2;
	let a0_href_value;
	let t3;
	let h41;
	let t5;
	let div1;
	let a1;
	let t6_value = /*data*/ ctx[7].email + "";
	let t6;
	let a1_href_value;
	let t7;
	let h42;
	let t9;
	let div2;
	let a2;
	let t10;
	let t11_value = /*data*/ ctx[7].github + "";
	let t11;
	let a2_href_value;

	return {
		c() {
			h40 = element("h4");
			h40.textContent = "Phone:";
			t1 = space();
			div0 = element("div");
			a0 = element("a");
			t2 = text(t2_value);
			t3 = space();
			h41 = element("h4");
			h41.textContent = "Email:";
			t5 = space();
			div1 = element("div");
			a1 = element("a");
			t6 = text(t6_value);
			t7 = space();
			h42 = element("h4");
			h42.textContent = "GitHub:";
			t9 = space();
			div2 = element("div");
			a2 = element("a");
			t10 = text("github.com/");
			t11 = text(t11_value);
			attr(h40, "class", "text-xs font-bold tracking-widest uppercase");
			attr(a0, "href", a0_href_value = "tel:" + /*data*/ ctx[7].phone);
			attr(div0, "class", "mb-4");
			attr(h41, "class", "text-xs font-bold tracking-widest uppercase");
			attr(a1, "href", a1_href_value = "mailto:" + /*data*/ ctx[7].email);
			attr(div1, "class", "mb-4");
			attr(h42, "class", "text-xs font-bold tracking-widest uppercase");
			attr(a2, "href", a2_href_value = "https://github.com/" + /*data*/ ctx[7].github);
			attr(a2, "target", "_blank");
			attr(div2, "class", "mb-4");
		},
		m(target, anchor) {
			insert(target, h40, anchor);
			insert(target, t1, anchor);
			insert(target, div0, anchor);
			append(div0, a0);
			append(a0, t2);
			insert(target, t3, anchor);
			insert(target, h41, anchor);
			insert(target, t5, anchor);
			insert(target, div1, anchor);
			append(div1, a1);
			append(a1, t6);
			insert(target, t7, anchor);
			insert(target, h42, anchor);
			insert(target, t9, anchor);
			insert(target, div2, anchor);
			append(div2, a2);
			append(a2, t10);
			append(a2, t11);
		},
		p(ctx, dirty) {
			if (dirty & /*promise*/ 1 && t2_value !== (t2_value = /*data*/ ctx[7].phone + "")) set_data(t2, t2_value);

			if (dirty & /*promise*/ 1 && a0_href_value !== (a0_href_value = "tel:" + /*data*/ ctx[7].phone)) {
				attr(a0, "href", a0_href_value);
			}

			if (dirty & /*promise*/ 1 && t6_value !== (t6_value = /*data*/ ctx[7].email + "")) set_data(t6, t6_value);

			if (dirty & /*promise*/ 1 && a1_href_value !== (a1_href_value = "mailto:" + /*data*/ ctx[7].email)) {
				attr(a1, "href", a1_href_value);
			}

			if (dirty & /*promise*/ 1 && t11_value !== (t11_value = /*data*/ ctx[7].github + "")) set_data(t11, t11_value);

			if (dirty & /*promise*/ 1 && a2_href_value !== (a2_href_value = "https://github.com/" + /*data*/ ctx[7].github)) {
				attr(a2, "href", a2_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(h40);
			if (detaching) detach(t1);
			if (detaching) detach(div0);
			if (detaching) detach(t3);
			if (detaching) detach(h41);
			if (detaching) detach(t5);
			if (detaching) detach(div1);
			if (detaching) detach(t7);
			if (detaching) detach(h42);
			if (detaching) detach(t9);
			if (detaching) detach(div2);
		}
	};
}

// (119:20) <SidebarSection title="Skills">
function create_default_slot_4(ctx) {
	let t_value = /*data*/ ctx[7].skills + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*promise*/ 1 && t_value !== (t_value = /*data*/ ctx[7].skills + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (123:28) {#each data.languages as language}
function create_each_block_2(ctx) {
	let li;
	let t0_value = /*language*/ ctx[14].name + "";
	let t0;
	let t1;
	let span;
	let t2;
	let t3_value = /*language*/ ctx[14].level + "";
	let t3;
	let t4;
	let t5;

	return {
		c() {
			li = element("li");
			t0 = text(t0_value);
			t1 = space();
			span = element("span");
			t2 = text("(");
			t3 = text(t3_value);
			t4 = text(")");
			t5 = space();
			attr(span, "class", "text-xs");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, t0);
			append(li, t1);
			append(li, span);
			append(span, t2);
			append(span, t3);
			append(span, t4);
			append(li, t5);
		},
		p(ctx, dirty) {
			if (dirty & /*promise*/ 1 && t0_value !== (t0_value = /*language*/ ctx[14].name + "")) set_data(t0, t0_value);
			if (dirty & /*promise*/ 1 && t3_value !== (t3_value = /*language*/ ctx[14].level + "")) set_data(t3, t3_value);
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

// (121:20) <SidebarSection title="Languages">
function create_default_slot_3(ctx) {
	let ul;
	let each_value_2 = /*data*/ ctx[7].languages;
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	return {
		c() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*promise*/ 1) {
				each_value_2 = /*data*/ ctx[7].languages;
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d(detaching) {
			if (detaching) detach(ul);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (133:20) <SidebarSection title="Interests">
function create_default_slot_2(ctx) {
	let t_value = /*data*/ ctx[7].interests.join(", ") + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*promise*/ 1 && t_value !== (t_value = /*data*/ ctx[7].interests.join(", ") + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (140:24) {#each data.positions as position}
function create_each_block_1(ctx) {
	let contentitem;
	let current;
	const contentitem_spread_levels = [/*position*/ ctx[11]];
	let contentitem_props = {};

	for (let i = 0; i < contentitem_spread_levels.length; i += 1) {
		contentitem_props = assign(contentitem_props, contentitem_spread_levels[i]);
	}

	contentitem = new ContentItem({ props: contentitem_props });

	return {
		c() {
			create_component(contentitem.$$.fragment);
		},
		m(target, anchor) {
			mount_component(contentitem, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const contentitem_changes = (dirty & /*promise*/ 1)
			? get_spread_update(contentitem_spread_levels, [get_spread_object(/*position*/ ctx[11])])
			: {};

			contentitem.$set(contentitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(contentitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(contentitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(contentitem, detaching);
		}
	};
}

// (139:20) <ContentSection title="Experience">
function create_default_slot_1(ctx) {
	let each_1_anchor;
	let current;
	let each_value_1 = /*data*/ ctx[7].positions;
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*promise*/ 1) {
				each_value_1 = /*data*/ ctx[7].positions;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (145:24) {#each data.educations as education}
function create_each_block(ctx) {
	let contentitem;
	let current;
	const contentitem_spread_levels = [/*education*/ ctx[8]];
	let contentitem_props = {};

	for (let i = 0; i < contentitem_spread_levels.length; i += 1) {
		contentitem_props = assign(contentitem_props, contentitem_spread_levels[i]);
	}

	contentitem = new ContentItem({ props: contentitem_props });

	return {
		c() {
			create_component(contentitem.$$.fragment);
		},
		m(target, anchor) {
			mount_component(contentitem, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const contentitem_changes = (dirty & /*promise*/ 1)
			? get_spread_update(contentitem_spread_levels, [get_spread_object(/*education*/ ctx[8])])
			: {};

			contentitem.$set(contentitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(contentitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(contentitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(contentitem, detaching);
		}
	};
}

// (144:20) <ContentSection title="Education">
function create_default_slot(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*data*/ ctx[7].educations;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*promise*/ 1) {
				each_value = /*data*/ ctx[7].educations;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (73:16)      <div         class="absolute right-1/2 bottom-1/2 transform translate-x-1/2 translate-y-1/2 "     >         <div             style="border-top-color:transparent"             class="border-solid animate-spin rounded-full border-gray-800 border-8 h-48 w-48"         />     </div> {:then data}
function create_pending_block(ctx) {
	let div1;

	return {
		c() {
			div1 = element("div");
			div1.innerHTML = `<div style="border-top-color:transparent" class="border-solid animate-spin rounded-full border-gray-800 border-8 h-48 w-48"></div>`;
			attr(div1, "class", "absolute right-1/2 bottom-1/2 transform translate-x-1/2 translate-y-1/2 ");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

function create_fragment(ctx) {
	let await_block_anchor;
	let promise_1;
	let current;

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: true,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 7,
		error: 17,
		blocks: [,,,]
	};

	handle_promise(promise_1 = /*promise*/ ctx[0], info);

	return {
		c() {
			await_block_anchor = empty();
			info.block.c();
		},
		m(target, anchor) {
			insert(target, await_block_anchor, anchor);
			info.block.m(target, info.anchor = anchor);
			info.mount = () => await_block_anchor.parentNode;
			info.anchor = await_block_anchor;
			current = true;
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;
			info.ctx = ctx;

			if (dirty & /*promise*/ 1 && promise_1 !== (promise_1 = /*promise*/ ctx[0]) && handle_promise(promise_1, info)) {
				
			} else {
				const child_ctx = ctx.slice();
				child_ctx[7] = child_ctx[17] = info.resolved;
				info.block.p(child_ctx, dirty);
			}
		},
		i(local) {
			if (current) return;
			transition_in(info.block);
			current = true;
		},
		o(local) {
			for (let i = 0; i < 3; i += 1) {
				const block = info.blocks[i];
				transition_out(block);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(await_block_anchor);
			info.block.d(detaching);
			info.token = null;
			info = null;
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { id } = $$props;
	let { key } = $$props;

	// Replace by Intl.DisplayNames once supported by browsers
	const lngNames = { cs: "Čeština", en: "Angličtina" };

	let promise;

	async function load() {
		const response = await fetch(`https://cv.bohm.me/data/${id}`);
		if (!response.ok) throw new Error(`Can't fetch data`);
		const buffer = await response.arrayBuffer();
		return new Uint8Array(buffer);
	}

	async function decrypt(data) {
		return decryptBytes(decodeURIComponent(key), data);
	}

	async function map(data) {
		return {
			...data,
			skills: data.skills.join(", "),
			languages: data.languages.map(l => {
				// const lngNames = new Intl.DisplayNames(["cs"], {
				//     type: "language",
				// });
				return {
					name: lngNames[l.code],
					// name: lngNames.of(l.code),
					level: l.level
				};
			}),
			educations: data.educations.map(e => {
				const since = new Date(e.since).getFullYear();
				const until = new Date(e.until).getFullYear();

				return {
					title: e.field,
					subtitle: `${e.school} / ${since} - ${until}`
				};
			}),
			positions: data.positions.map(p => {
				const since = new Date(p.since).getFullYear();
				const until = new Date(p.until).getFullYear();
				const range = `${since} - ${until}`;

				return {
					title: p.role,
					subtitle: p.company ? `${p.company} / ${range}` : range,
					description: p.description,
					responsibilities: p.responsibilities
				};
			})
		};
	}

	promise = load().then(decrypt).then(map);

	$$self.$$set = $$props => {
		if ("id" in $$props) $$invalidate(1, id = $$props.id);
		if ("key" in $$props) $$invalidate(2, key = $$props.key);
	};

	return [promise, id, key];
}

class ResumePage extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { id: 1, key: 2 });
	}
}

export default ResumePage;
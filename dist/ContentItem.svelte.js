/* src/ContentItem.svelte generated by Svelte v3.32.1 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "../_snowpack/pkg/svelte/internal.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (11:4) {#if description}
function create_if_block_1(ctx) {
	let p;
	let t;

	return {
		c() {
			p = element("p");
			t = text(/*description*/ ctx[2]);
			attr(p, "class", "mb-2");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t);
		},
		p(ctx, dirty) {
			if (dirty & /*description*/ 4) set_data(t, /*description*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (14:4) {#if responsibilities}
function create_if_block(ctx) {
	let ul;
	let each_value = /*responsibilities*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(ul, "class", "ml-6 list-disc");
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*responsibilities*/ 8) {
				each_value = /*responsibilities*/ ctx[3];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (detaching) detach(ul);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (16:12) {#each responsibilities as responsibility}
function create_each_block(ctx) {
	let li;
	let t_value = /*responsibility*/ ctx[4] + "";
	let t;

	return {
		c() {
			li = element("li");
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, t);
		},
		p(ctx, dirty) {
			if (dirty & /*responsibilities*/ 8 && t_value !== (t_value = /*responsibility*/ ctx[4] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let h3;
	let t0;
	let t1;
	let h4;
	let t2;
	let t3;
	let t4;
	let if_block0 = /*description*/ ctx[2] && create_if_block_1(ctx);
	let if_block1 = /*responsibilities*/ ctx[3] && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			h3 = element("h3");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			h4 = element("h4");
			t2 = text(/*subtitle*/ ctx[1]);
			t3 = space();
			if (if_block0) if_block0.c();
			t4 = space();
			if (if_block1) if_block1.c();
			attr(h3, "class", "font-bold uppercase");
			attr(h4, "class", "mb-4 italic");
			attr(div, "class", "mb-8");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h3);
			append(h3, t0);
			append(div, t1);
			append(div, h4);
			append(h4, t2);
			append(div, t3);
			if (if_block0) if_block0.m(div, null);
			append(div, t4);
			if (if_block1) if_block1.m(div, null);
		},
		p(ctx, [dirty]) {
			if (dirty & /*title*/ 1) set_data(t0, /*title*/ ctx[0]);
			if (dirty & /*subtitle*/ 2) set_data(t2, /*subtitle*/ ctx[1]);

			if (/*description*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(div, t4);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*responsibilities*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props;
	let { subtitle } = $$props;
	let { description } = $$props;
	let { responsibilities } = $$props;

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("subtitle" in $$props) $$invalidate(1, subtitle = $$props.subtitle);
		if ("description" in $$props) $$invalidate(2, description = $$props.description);
		if ("responsibilities" in $$props) $$invalidate(3, responsibilities = $$props.responsibilities);
	};

	return [title, subtitle, description, responsibilities];
}

class ContentItem extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			title: 0,
			subtitle: 1,
			description: 2,
			responsibilities: 3
		});
	}
}

export default ContentItem;
/* src/Router.svelte generated by Svelte v3.32.1 */
import {
	SvelteComponent,
	assign,
	check_outros,
	create_component,
	destroy_component,
	detach,
	empty,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import regexparam from "../_snowpack/pkg/regexparam.js";
import { onMount, setContext } from "../_snowpack/pkg/svelte.js";

function create_fragment(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	const switch_instance_spread_levels = [/*activeParams*/ ctx[1]];
	var switch_value = /*activeRoute*/ ctx[0] && /*activeRoute*/ ctx[0].component;

	function switch_props(ctx) {
		let switch_instance_props = {};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		return { props: switch_instance_props };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const switch_instance_changes = (dirty & /*activeParams*/ 2)
			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*activeParams*/ ctx[1])])
			: {};

			if (switch_value !== (switch_value = /*activeRoute*/ ctx[0] && /*activeRoute*/ ctx[0].component)) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let items;
	let { routes } = $$props;
	let activeRoute;
	let activeParams = {};

	function navigate(path, pushToHistory) {
		for (let item of items) {
			const params = item.pattern.exec(path);

			if (params) {
				$$invalidate(0, activeRoute = item);
				$$invalidate(1, activeParams = item.keys.reduce((result, key, idx) => ({ ...result, [key]: params[idx + 1] }), {}));

				if (pushToHistory) {
					const [url] = document.location.href.split("#");
					window.history.pushState({}, "", `${url}#${path.substring(1)}`);
				}

				break;
			}
		}
	}

	window.addEventListener("popstate", () => navigate("/" + window.location.hash.substring(1)));
	setContext("router", { navigate });
	onMount(() => navigate("/" + window.location.hash.substring(1)));

	$$self.$$set = $$props => {
		if ("routes" in $$props) $$invalidate(2, routes = $$props.routes);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*routes*/ 4) {
			$: items = routes.map(({ component, path }) => {
				const { keys, pattern } = regexparam(path);
				return { component, keys, pattern };
			});
		}
	};

	return [activeRoute, activeParams, routes];
}

class Router extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { routes: 2 });
	}
}

export default Router;
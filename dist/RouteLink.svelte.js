/* src/RouteLink.svelte generated by Svelte v3.32.1 */
import {
	SvelteComponent,
	attr,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	safe_not_equal,
	transition_in,
	transition_out,
	update_slot
} from "../_snowpack/pkg/svelte/internal.js";

import { getContext, onMount } from "../_snowpack/pkg/svelte.js";

function create_fragment(ctx) {
	let a;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	return {
		c() {
			a = element("a");
			if (default_slot) default_slot.c();
			attr(a, "href", /*to*/ ctx[0]);
			attr(a, "class", /*cssClass*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, a, anchor);

			if (default_slot) {
				default_slot.m(a, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(a, "click", /*navigate*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}

			if (!current || dirty & /*to*/ 1) {
				attr(a, "href", /*to*/ ctx[0]);
			}

			if (!current || dirty & /*cssClass*/ 2) {
				attr(a, "class", /*cssClass*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { to = "/" } = $$props;
	let { cssClass = null } = $$props;
	let router;

	function navigate(e) {
		e.preventDefault();
		e.stopPropagation();
		router.navigate(to, true);
	}

	onMount(() => {
		router = getContext("router");
	});

	$$self.$$set = $$props => {
		if ("to" in $$props) $$invalidate(0, to = $$props.to);
		if ("cssClass" in $$props) $$invalidate(1, cssClass = $$props.cssClass);
		if ("$$scope" in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	return [to, cssClass, navigate, $$scope, slots];
}

class RouteLink extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { to: 0, cssClass: 1 });
	}
}

export default RouteLink;